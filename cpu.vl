module halfadder(S,C,x,y);
//S = sum
//C = carry

input x,y;
output S,C;

xor x1 (S,x,y);
and a1 (C,x,y);

endmodule

module fulladder (S,C,x,y,z);
input x,y,z;
output S,C;
wire S1,C1,C2;

halfadder HA1 (S1,C1,x,y),
          HA2 (S,C2,S1,z);
    or C3(C,C2,C1);    
endmodule 

module mux4x1(i0,i1,i2,i3,select,y); 
  input i0,i1,i2,i3; 
  input [1:0] select; 
  output y;
  
  mux2x1 mux1(i0, i1, select[0], m1);
  mux2x1 mux2(i2, i3, select[0], m2);
  mux2x1 mux3(m1, m2, select[1], y);
endmodule




//increase to 32 bits
module ALU (op,a,b,result,zero);
   input [31:0] a;
   input [31:0] b;
   input [3:0] op;
   output [31:0] result;
   output zero;
   //              a,   b,Ainvert,binvert,op,less,carryin,       carryout,     result
   ALU1   alu0 (a[0],b[0],op[3],op[2],op[1:0],set, op[2],c1,result[0]);
   ALU1   alu1 (a[1],b[1],op[3],op[2],op[1:0],1'b0,c1,   c2,result[1]);
   ALU1   alu2 (a[2],b[2],op[3],op[2],op[1:0],1'b0,c2,   c3,result[2]);
   ALU1   alu3 (a[3],b[3],op[3],op[2],op[1:0],1'b0,c3,   c4,result[3]);
   ALU1   alu4 (a[4],b[4],op[3],op[2],op[1:0],1'b0,c4,   c5,result[4]);
   ALU1   alu5 (a[5],b[5],op[3],op[2],op[1:0],1'b0,c5,   c6,result[5]);
   ALU1   alu6 (a[6],b[6],op[3],op[2],op[1:0],1'b0,c6,   c7,result[6]);
   ALU1   alu7 (a[7],b[7],op[3],op[2],op[1:0],1'b0,c7,   c8,result[7]);
   ALU1   alu8 (a[8],b[8],op[3],op[2],op[1:0],1'b0,c8,   c9,result[8]);
   ALU1   alu9 (a[9],b[9],op[3],op[2],op[1:0],1'b0,c9,   c10,result[9]);
   ALU1   alu10 (a[10],b[10],op[3],op[2],op[1:0],1'b0,c10,   c11,result[10]);
   ALU1   alu11 (a[11],b[11],op[3],op[2],op[1:0],1'b0,c11,   c12,result[11]);
   ALU1   alu12 (a[12],b[12],op[3],op[2],op[1:0],1'b0,c12,   c13,result[12]);
   ALU1   alu13 (a[13],b[13],op[3],op[2],op[1:0],1'b0,c13,   c14,result[13]);
   ALU1   alu14 (a[14],b[14],op[3],op[2],op[1:0],1'b0,c14,   c15,result[14]);
   ALU1   alu15 (a[15],b[15],op[3],op[2],op[1:0],1'b0,c15,   c16,result[15]);
    ALU1   alu16 (a[16],b[16],op[3],op[2],op[1:0],1'b0,c16,   c17,result[16]);
    ALU1   alu17 (a[17],b[17],op[3],op[2],op[1:0],1'b0,c17,   c18,result[17]);
    ALU1   alu18 (a[18],b[18],op[3],op[2],op[1:0],1'b0,c18,   c19,result[18]);
    ALU1   alu19 (a[19],b[19],op[3],op[2],op[1:0],1'b0,c19,   c20,result[19]);
    ALU1   alu20 (a[20],b[20],op[3],op[2],op[1:0],1'b0,c20,   c21,result[20]);
    ALU1   alu21 (a[21],b[21],op[3],op[2],op[1:0],1'b0,c21,   c22,result[21]);
    ALU1   alu22 (a[22],b[22],op[3],op[2],op[1:0],1'b0,c22,   c23,result[22]);
    ALU1   alu23 (a[23],b[23],op[3],op[2],op[1:0],1'b0,c23,   c24,result[23]);
    ALU1   alu24 (a[24],b[24],op[3],op[2],op[1:0],1'b0,c24,   c25,result[24]);
    ALU1   alu25 (a[25],b[25],op[3],op[2],op[1:0],1'b0,c25,   c26,result[25]);
    ALU1   alu26 (a[26],b[26],op[3],op[2],op[1:0],1'b0,c26,   c27,result[26]);
    ALU1   alu27 (a[27],b[27],op[3],op[2],op[1:0],1'b0,c27,   c28,result[27]);
    ALU1   alu28 (a[28],b[28],op[3],op[2],op[1:0],1'b0,c28,   c29,result[28]);
    ALU1   alu29 (a[29],b[29],op[3],op[2],op[1:0],1'b0,c29,   c30,result[29]);
    ALU1   alu30 (a[30],b[30],op[3],op[2],op[1:0],1'b0,c30,   c31,result[30]);
    ALUmsb alu31 (a[31],b[31],op[3],op[2],op[1:0],1'b0,c31,   c32,result[31],set);
   nor nor1(zero,result[0],result[1],result[2],result[3],result[4],result[5],result[6],result[7],result[8],result[9],result[10],result[11],result[12],result[13],result[14],result[15],result[16],result[17],result[18],result[19],result[20],result[21],result[22],result[23],result[24],result[25],result[26],result[27],result[28],result[29],result[30],result[31]);

endmodule

module ALU1(a,b,Ainvert,Binvert,op,less,Cin,Cout,Result);
input a,b,Binvert,less,Ainvert;
input [1:0] op;
input Cin;
output Cout,Result,Sum;
wire b1,andout,orout,a1;

not not1(a_inv, a);
not not2(b_inv, b);


xor(a1,a,Ainvert);
// or

xor(b1,b,Binvert);


or(orout,a1,b1);
and(andout,a1,b1 );


fulladder fa(Sum,Cout,a1,b1,Cin);
mux4x1 mux2(andout,orout,Sum,less,op[1:0],Result);

endmodule

module ALUmsb(a,b,Ainvert,Binvert,op,less,Cin,Cout,Result,Sum);
input a,b,Binvert,less,Ainvert,Cin;
input [1:0] op;
output Sum,Result,Cout;
wire b1,andout,s1,notb,nota,a1,t1;

not not1(a_inv, a);
not not2(b_inv, b);

//mux2x1 mx1(a,a_inv,ainvert,a1),
//        mx2(b,b_inv,binvert,b1);
xor(a1,a,Ainvert);

xor(b1,b,Binvert);

or(orout,a1,b1);
and(andout,a1,b1 );


fulladder fa(Sum,Cout,a1,b1,Cin);
mux4x1 mux2(andout,orout,Sum,less,op[1:0],Result);


endmodule

module mux2x1(A,B,select,OUT); 
  input A,B,select; 
  output OUT;

  not not1(i0, select);
  and and1(i1, A, i0);
  and and2(i2, B, select);
  or or1(OUT, i1, i2);
endmodule

//register file behavioral
module reg_file (RR1,RR2,WR,WD,RegWrite,RD1,RD2,clock);
  input [4:0] RR1,RR2,WR;
  input [31:0] WD;
  input RegWrite,clock;
  output [31:0] RD1,RD2;
  reg [31:0] Regs[0:31];
  assign RD1 = Regs[RR1];
  assign RD2 = Regs[RR2];
  initial Regs[0] = 0;
  always @(negedge clock)
    if (RegWrite==1 & WR!=0) 
	Regs[WR] <= WD;
endmodule



// register file
module reg_file2(rr1,rr2,wr,wd,regwrite,rd1,rd2,clock);

   input [1:0] rr1,rr2,wr;
   input [31:0] wd;
   input regwrite,clock;
   output [31:0] rd1,rd2, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11,q12,q13,q14,q15,q16,q17,q18,q19,q20,q21,q22,q23,q24,q25,q26,q27,q28,q29,q30,q31;
   wire [31:0] q0;
   wire c1, c2, c3,w0 , w1, w2, w3, regwrite_and_clock;

    // 31 registers

    register r0  (32'b0,c0,q0); //register $0
  register r1  (wd,c1,q1);
  register r2  (wd,c2,q2);
  register r3  (wd,c3,q3);
    register r4  (wd,c4,q4);
    register r5  (wd,c5,q5);
    register r6  (wd,c6,q6);
    register r7  (wd,c7,q7);
    register r8  (wd,c8,q8);
    register r9  (wd,c9,q9);
    register r10  (wd,c10,q10);
    register r11  (wd,c11,q11);
    register r12  (wd,c12,q12);
    register r13  (wd,c13,q13);
    register r14  (wd,c14,q14);
    register r15  (wd,c15,q15);
    register r16  (wd,c16,q16);
    register r17  (wd,c17,q17);
    register r18  (wd,c18,q18);
    register r19  (wd,c19,q19);
    register r20  (wd,c20,q20);
    register r21  (wd,c21,q21);
    register r22  (wd,c22,q22);
    register r23  (wd,c23,q23);
    register r24  (wd,c24,q24);
    register r25  (wd,c25,q25);
    register r26  (wd,c26,q26);
    register r27  (wd,c27,q27);
    register r28  (wd,c28,q28);
    register r29  (wd,c29,q29);
    register r30  (wd,c30,q30);
    register r31  (wd,c31,q31);

    // output port

  mux32Bit4x1 mux1 (32'b0000000000000000,q1,q2,q3,rr1,rd1),
              mux2 (32'b0000000000000000,q1,q2,q3,rr2,rd2);

// input port

   decoder dec(wr[1],wr[0],w3,w2,w1,w0);

   and a (regwrite_and_clock,regwrite,clock);

   and a1 (c1,regwrite_and_clock,w1),
       a2 (c2,regwrite_and_clock,w2),
       a3 (c3,regwrite_and_clock,w3);




    


endmodule

// mux32Bit4x1
module mux32Bit4x1(i0, i1, i2, i3, select, O);
	input [31:0] i0, i1, i2, i3;
	input [1:0] select;
	output [31:0] O;
	
	mux4x1 	mux0(i0[0], i1[0], i2[0], i3[0], select, O[0]),
			mux1(i0[1], i1[1], i2[1], i3[1], select, O[1]),
			mux2(i0[2], i1[2], i2[2], i3[2], select, O[2]),
			mux3(i0[3], i1[3], i2[3], i3[3], select, O[3]),
			mux4(i0[4], i1[4], i2[4], i3[4], select, O[4]),
			mux5(i0[5], i1[5], i2[5], i3[5], select, O[5]),
			mux6(i0[6], i1[6], i2[6], i3[6], select, O[6]),
			mux7(i0[7], i1[7], i2[7], i3[7], select, O[7]),
			mux8(i0[8], i1[8], i2[8], i3[8], select, O[8]),
			mux9(i0[9], i1[9], i2[9], i3[9], select, O[9]),
			mux10(i0[10], i1[10], i2[10], i3[10], select, O[10]),
			mux11(i0[11], i1[11], i2[11], i3[11], select, O[11]),
			mux12(i0[12], i1[12], i2[12], i3[12], select, O[12]),
			mux13(i0[13], i1[13], i2[13], i3[13], select, O[13]),
			mux14(i0[14], i1[14], i2[14], i3[14], select, O[14]),
			mux15(i0[15], i1[15], i2[15], i3[15], select, O[15]),
            mux16(i0[16], i1[16], i2[16], i3[16], select, O[16]),
            mux17(i0[17], i1[17], i2[17], i3[17], select, O[17]),
            mux18(i0[18], i1[18], i2[18], i3[18], select, O[18]),
            mux19(i0[19], i1[19], i2[19], i3[19], select, O[19]),
            mux20(i0[20], i1[20], i2[20], i3[20], select, O[20]),
            mux21(i0[21], i1[21], i2[21], i3[21], select, O[21]),
            mux22(i0[22], i1[22], i2[22], i3[22], select, O[22]),
            mux23(i0[23], i1[23], i2[23], i3[23], select, O[23]),
            mux24(i0[24], i1[24], i2[24], i3[24], select, O[24]),
            mux25(i0[25], i1[25], i2[25], i3[25], select, O[25]),
            mux26(i0[26], i1[26], i2[26], i3[26], select, O[26]),
            mux27(i0[27], i1[27], i2[27], i3[27], select, O[27]),
            mux28(i0[28], i1[28], i2[28], i3[28], select, O[28]),
            mux29(i0[29], i1[29], i2[29], i3[29], select, O[29]),
            mux30(i0[30], i1[30], i2[30], i3[30], select, O[30]),
            mux31(i0[31], i1[31], i2[31], i3[31], select, O[31]);

            
            

endmodule

//register
module register(WriteData,CLK, ReadData);
   input [31:0] WriteData;
   input CLK;
   output [31:0] ReadData;
   D_flip_flop r0(WriteData[0], CLK, ReadData[0]);
   D_flip_flop r1(WriteData[1], CLK, ReadData[1]);
   D_flip_flop r2(WriteData[2], CLK, ReadData[2]);
   D_flip_flop r3(WriteData[3], CLK, ReadData[3]);
   D_flip_flop r4(WriteData[4], CLK, ReadData[4]);
    D_flip_flop r5(WriteData[5], CLK, ReadData[5]);
    D_flip_flop r6(WriteData[6], CLK, ReadData[6]);
    D_flip_flop r7(WriteData[7], CLK, ReadData[7]);
    D_flip_flop r8(WriteData[8], CLK, ReadData[8]);
    D_flip_flop r9(WriteData[9], CLK, ReadData[9]);
    D_flip_flop r10(WriteData[10], CLK, ReadData[10]);
    D_flip_flop r11(WriteData[11], CLK, ReadData[11]);
    D_flip_flop r12(WriteData[12], CLK, ReadData[12]);
    D_flip_flop r13(WriteData[13], CLK, ReadData[13]);
    D_flip_flop r14(WriteData[14], CLK, ReadData[14]);
    D_flip_flop r15(WriteData[15], CLK, ReadData[15]);
    D_flip_flop r16(WriteData[16], CLK, ReadData[16]);
    D_flip_flop r17(WriteData[17], CLK, ReadData[17]);
    D_flip_flop r18(WriteData[18], CLK, ReadData[18]);
    D_flip_flop r19(WriteData[19], CLK, ReadData[19]);
    D_flip_flop r20(WriteData[20], CLK, ReadData[20]);
    D_flip_flop r21(WriteData[21], CLK, ReadData[21]);
    D_flip_flop r22(WriteData[22], CLK, ReadData[22]);  
    D_flip_flop r23(WriteData[23], CLK, ReadData[23]);
    D_flip_flop r24(WriteData[24], CLK, ReadData[24]);
    D_flip_flop r25(WriteData[25], CLK, ReadData[25]);
    D_flip_flop r26(WriteData[26], CLK, ReadData[26]);
    D_flip_flop r27(WriteData[27], CLK, ReadData[27]);
    D_flip_flop r28(WriteData[28], CLK, ReadData[28]);
    D_flip_flop r29(WriteData[29], CLK, ReadData[29]);
    D_flip_flop r30(WriteData[30], CLK, ReadData[30]);
    D_flip_flop r31(WriteData[31], CLK, ReadData[31]);



endmodule

module decoder (S1,S0,D3,D2,D1,D0); 
   input S0,S1; 
   output D0,D1,D2,D3; 
 
   not n1 (notS0,S0),
       n2 (notS1,S1);

   and a0 (D0,notS1,notS0), 
       a1 (D1,notS1,   S0), 
       a2 (D2,   S1,notS0), 
       a3 (D3,   S1,   S0); 
endmodule 

module D_flip_flop(D,CLK,Q);
   input D,CLK; 
   output Q; 
   wire CLK1, Y;
   not  not1 (CLK1,CLK);
   D_latch D1(D,CLK, Y),
           D2(Y,CLK1,Q);
endmodule 

module D_latch(D,C,Q);
   input D,C; 
   output Q;
   wire x,y,D1,Q1; 
   nand nand1 (x,D, C), 
        nand2 (y,D1,C), 
        nand3 (Q,x,Q1),
        nand4 (Q1,y,Q); 
   not  not1  (D1,D);
endmodule
//jump control

//branch control

//alu control

//memory control




//control unit


module MainControl (Op,Control); 
  input [5:0] Op;
  output reg [7:0] Control;
// IDEX_RegDst,IDEX_ALUSrc,IDEX_MemtoReg,IDEX_RegWrite,IDEX_MemWrite,IDEX_Branch,IDEX_ALUOp
  always @(Op) case (Op)
    6'b000000: Control <= 8'b10010010; // Rtype
    6'b100011: Control <= 8'b01110000; // LW    
    6'b101011: Control <= 8'b01001000; // SW    
    6'b000100: Control <= 8'b00000101; // BEQ   
    6'b001000: Control <= 8'b01010100; // ADDI
  endcase
endmodule

module ALUControl (ALUOp,FuncCode,ALUCtl); 
  input [1:0] ALUOp;
  input [5:0] FuncCode;
  output reg [3:0] ALUCtl;
  always @(ALUOp,FuncCode) case (ALUOp)
    2'b00: ALUCtl <= 4'b0010; // add
    2'b01: ALUCtl <= 4'b0110; // subtract
    2'b10: case (FuncCode)
	     32: ALUCtl <= 4'b0010; // add
	     34: ALUCtl <= 4'b0110; // sub
	     36: ALUCtl <= 4'b0000; // and
	     37: ALUCtl <= 4'b0001; // or
	     39: ALUCtl <= 4'b1100; // nor
	     42: ALUCtl <= 4'b0111; // slt
    endcase
  endcase
endmodule


module mux2bit2x1(A,B,select,OUT);
	input [1:0] A,B;
    input select;
	output [1:0] OUT;

    mux2x1 m1(A[0], B[0], select, OUT[0]),
           m2(A[1], B[1], select, OUT[1]);
endmodule

module mux16bit2x1(A, B, select, OUT);
	input [15:0] A,B;
    input select;
	output [15:0] OUT;

    mux2x1 mux1(A[0], B[0], select, OUT[0]),
           mux2(A[1], B[1], select, OUT[1]),
           mux3(A[2], B[2], select, OUT[2]),
           mux4(A[3], B[3], select, OUT[3]),
           mux5(A[4], B[4], select, OUT[4]),
           mux6(A[5], B[5], select, OUT[5]),
           mux7(A[6], B[6], select, OUT[6]),
           mux8(A[7], B[7], select, OUT[7]),
           mux9(A[8], B[8], select, OUT[8]),
           mux10(A[9], B[9], select, OUT[9]),
           mux11(A[10], B[10], select, OUT[10]),
           mux12(A[11], B[11], select, OUT[11]),
           mux13(A[12], B[12], select, OUT[12]),
           mux14(A[13], B[13], select, OUT[13]),
           mux15(A[14], B[14], select, OUT[14]),
           mux16(A[15], B[15], select, OUT[15]);
endmodule




//5 stage pipeline
module CPU (clock,PC,IFID_IR,IDEX_IR,EXMEM_IR,MEMWB_IR,WD);
  input clock;
  output [31:0] PC,IFID_IR,IDEX_IR,EXMEM_IR,MEMWB_IR,WD;

// Test Program
  initial begin 
    IMemory[0] = 32'h2009000f;  // addi $t1, $0,  15   ($t1=15)
    IMemory[1] = 32'h200a0007;  // addi $t2, $0,  7    ($t2=7)
    IMemory[2] = 32'h012a5824;  // and  $t3, $t1, $t2  ($t3=7)
    IMemory[3] = 32'h012b5022;  // sub  $t2, $t1, $t3  ($t2=8)
    IMemory[4] = 32'h014b5025;  // or   $t2, $t2, $t3  ($t2=15)
    IMemory[5] = 32'h014b5820;  // add  $t3, $t2, $t3  ($t3=22)
    IMemory[6] = 32'h014b4827;  // nor  $t1, $t2, $t3  ($t1=-32)
    IMemory[7] = 32'h016a482a;  // slt  $t1, $t3, $t2  ($t1=0)
    IMemory[8] = 32'h014b482a;  // slt  $t1, $t2, $t3  ($t1=1)

    // Data
    DMemory[0] = 5; // switch the cells and see how the simulation output changes
    DMemory[1] = 5; // (beq is taken if DMemory[0]=7; DMemory[1]=5, not taken otherwise)
    DMemory[2] = 5;
    DMemory[3] = 5;
  end

 // Pipeline 
// IF 
   wire [31:0] PCplus4, NextPC;
   reg[31:0] PC, IMemory[0:1023], IFID_IR, IFID_PCplus4;
   ALU fetch (4'b0010,PC,4,PCplus4,Unused1);
   assign NextPC = (EXMEM_Branch && EXMEM_Zero) ? EXMEM_Target: PCplus4;
// ID
   wire [7:0] Control;
   reg IDEX_RegWrite,IDEX_MemtoReg,
       IDEX_Branch,  IDEX_MemWrite,
       IDEX_ALUSrc,  IDEX_RegDst;
   reg [1:0]  IDEX_ALUOp;
   wire [31:0] RD1,RD2,SignExtend, WD;
   reg [31:0] IDEX_PCplus4,IDEX_RD1,IDEX_RD2,IDEX_SignExt,IDEXE_IR;
   reg [31:0] IDEX_IR; // For monitoring the pipeline
   reg [4:0]  IDEX_rt,IDEX_rd;
   reg MEMWB_RegWrite; // part of MEM stage, but declared here before use (to avoid error)
   reg [4:0] MEMWB_rd; // part of MEM stage, but declared here before use (to avoid error)
   reg_file rf (IFID_IR[25:21],IFID_IR[20:16],MEMWB_rd,WD,MEMWB_RegWrite,RD1,RD2,clock);
   MainControl MainCtr (IFID_IR[31:26],Control); 
   assign SignExtend = {{16{IFID_IR[15]}},IFID_IR[15:0]}; 
// EXE
   reg EXMEM_RegWrite,EXMEM_MemtoReg,
       EXMEM_Branch,  EXMEM_MemWrite;
   wire [31:0] Target;
   reg EXMEM_Zero;
   reg [31:0] EXMEM_Target,EXMEM_ALUOut,EXMEM_RD2;
   reg [31:0] EXMEM_IR; // For monitoring the pipeline
   reg [4:0] EXMEM_rd;
   wire [31:0] B,ALUOut;
   wire [3:0] ALUctl;
   wire [4:0] WR;
   ALU branch (4'b0010,IDEX_SignExt<<2,IDEX_PCplus4,Target,Unused2);
   ALU ex (ALUctl, IDEX_RD1, B, ALUOut, Zero);
   ALUControl ALUCtrl(IDEX_ALUOp, IDEX_SignExt[5:0], ALUctl); // ALU control unit
   assign B  = (IDEX_ALUSrc) ? IDEX_SignExt: IDEX_RD2;        // ALUSrc Mux 
   assign WR = (IDEX_RegDst) ? IDEX_rd: IDEX_rt;              // RegDst Mux
// MEM
   reg MEMWB_MemtoReg;
   reg [31:0] DMemory[0:1023],MEMWB_MemOut,MEMWB_ALUOut;
   reg [31:0] MEMWB_IR; // For monitoring the pipeline
   wire [31:0] MemOut;
   assign MemOut = DMemory[EXMEM_ALUOut>>2];
   always @(negedge clock) if (EXMEM_MemWrite) DMemory[EXMEM_ALUOut>>2] <= EXMEM_RD2;
// WB
   assign WD = (MEMWB_MemtoReg) ? MEMWB_MemOut: MEMWB_ALUOut; // MemtoReg Mux

   initial begin
    PC = 0;
// Initialize pipeline registers
    IDEX_RegWrite=0;IDEX_MemtoReg=0;IDEX_Branch=0;IDEX_MemWrite=0;IDEX_ALUSrc=0;IDEX_RegDst=0;IDEX_ALUOp=0;
    IFID_IR=0;
    EXMEM_RegWrite=0;EXMEM_MemtoReg=0;EXMEM_Branch=0;EXMEM_MemWrite=0;
    EXMEM_Target=0;
    MEMWB_RegWrite=0;MEMWB_MemtoReg=0;
   end

// Running the pipeline
   always @(negedge clock) begin 
// IF
    PC <= NextPC;
    IFID_PCplus4 <= PCplus4;
    IFID_IR <= IMemory[PC>>2];
// ID
    IDEX_IR <= IFID_IR; // For monitoring the pipeline
    {IDEX_RegDst,IDEX_ALUSrc,IDEX_MemtoReg,IDEX_RegWrite,IDEX_MemWrite,IDEX_Branch,IDEX_ALUOp} <= Control;   
    IDEX_PCplus4 <= IFID_PCplus4;
    IDEX_RD1 <= RD1; 
    IDEX_RD2 <= RD2;
    IDEX_SignExt <= SignExtend;
    IDEX_rt <= IFID_IR[20:16];
    IDEX_rd <= IFID_IR[15:11];
// EXE
    EXMEM_IR <= IDEX_IR; // For monitoring the pipeline
    EXMEM_RegWrite <= IDEX_RegWrite;
    EXMEM_MemtoReg <= IDEX_MemtoReg;
    EXMEM_Branch   <= IDEX_Branch;
    EXMEM_MemWrite <= IDEX_MemWrite;
    EXMEM_Target <= Target;
    EXMEM_Zero <= Zero;
    EXMEM_ALUOut <= ALUOut;
    EXMEM_RD2 <= IDEX_RD2;
    EXMEM_rd <= WR;
// MEM
    MEMWB_IR <= EXMEM_IR; // For monitoring the pipeline
    MEMWB_RegWrite <= EXMEM_RegWrite;
    MEMWB_MemtoReg <= EXMEM_MemtoReg;
    MEMWB_MemOut <= MemOut;
    MEMWB_ALUOut <= EXMEM_ALUOut;
    MEMWB_rd <= EXMEM_rd;
// WB
// Register write happens on neg edge of the clock (if MEMWB_RegWrite is asserted)
  end
endmodule



module test ();
  reg clock;
  wire signed [31:0] PC,IFID_IR,IDEX_IR,EXMEM_IR,MEMWB_IR,WD;
  CPU test_cpu(clock,PC,IFID_IR,IDEX_IR,EXMEM_IR,MEMWB_IR,WD);
  always #1 clock = ~clock;
  initial begin
    $display ("PC   IFID_IR  IDEX_IR  EXMEM_IR MEMWB_IR  WD");
    $monitor ("%3d  %h %h %h %h %2d",PC,IFID_IR,IDEX_IR,EXMEM_IR,MEMWB_IR,WD);
    clock = 1;
    #18 $finish;
  
  end
endmodule